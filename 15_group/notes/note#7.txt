템플릿함수
template 키워드를 사용하면 중복함수들을 일반화시킨 특별한 함수 

제네릭 함수
함수나 클래스를 일반화시키고, 매개 변수 타입을 지정하여 틀에서 찍어내는 함수

템플릿의 장단점
장점: 높은 소프트웨어의 생산성과 유용성
단점: 컴파일러에 따라 지원하지 않을 수 있다, 디버깅에 어려움이 있다

STL이란?
C++의 표준 라이브러리 중 하나로 많은 제네릭 클래스와 제네릭 함수를 포함하고 있다.

STL은 크게 컨테이너, 반복자, 알고리즘 이 세가지로 나눌 수 있다.

컨테이너: 자료를 저장하는 클래스 템플릿들의 집합

반복자: 컨테이너 원소를 순회하는 방법을 추상화한 객체들

알고리즘: 정렬, 삭제, 검색, 연산등의 활동을 수행하는 작업을 정의해 놓은 템플릿 함수

STL의 장점
1. STL은 컨테이너들에 독립적이기 때문에 라이브러리의 복잡성을 줄일 수 있다.
2. 우리가 따로 자료구조를 담은 함수를 만들어 놓지 않아도 미리 라이브러리만 포함시켜 쓸 수 있어 시간을 절약 할 수 있다.

템플릿 함수를 연습하여 반복 사용되는 함수를 일반화 시켜서 코드를 간소화 할 수 있도록 해야겠다.

