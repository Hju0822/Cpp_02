//Shape.h
class Shape {
Shape* next;
protected:
virtual void draw() = 0;
public:
Shape() { next = NULL; }
virtual ~Shape() { }
void paint();
Shape* add(Shape* p);
Shape* getNext() { return next;}
};

//Shape.cpp
#include <iostream>
#include "Shape.h"
using namespace std;
void Shape::paint() {
draw();
}
Shape* Shape::add(Shape *p) {
this->next = p;
return p;
}


//Circle.h
class Circle : public Shape {
protected:
virtual void draw();
};

//Circle.cpp
#include <iostream>
using namespace std;
#include "Shape.h"
#include "Circle.h"
void Circle::draw() {
cout << "Circle" << endl;
}

//Rect.h
class Rect : public Shape {
protected:
virtual void draw();
};

//Rect.cpp
#include <iostream>
using namespace std;
#include "Shape.h"
#include "Rect.h"
void Rect::draw() {
cout << "Rectangle" << endl;
}

//Line.h
class Line : public Shape {
protected:
virtual void draw();
}

//Line.cpp
#include <iostream>
using namespace std;
#include "Shape.h"
#include "Line.h“
void Line::draw() {
cout << "Line" << endl;
}

//main.cpp
#include <iostream>
using namespace std;
#include "GraphicEditor.h"

int main() {
  GraphicDditor *editor = new GraphicEditor();
  delete editor;
}

//GraphicEditor.h
#pragma once
#include "Shape.h"

class GraphicEditor {
  Shape *pStart;
  Shape *pLast;
public:
 GraphicEditor();
 ~GraphicEditor();
  void run();
  void show();
  void insertShape(int n);
  void deleteShape(int n);
};

//UI.h
#pragma once

class UI {
public:
   static int menuUI();
   static int insertUI();
   static int deleteUI();
};

//UI.cpp
#include <iostream>
#include "UI.h"
using namespace std;

int UI : : menuUI() {
      int n;
      cout << " 삽입:1, 삭제:2, 모두보기:3, 종료:4 >> ";
      cin >> n;
      return n;
}

int UI : : insertUI() {
   int n;
   cout << " 선:1, 원:2, 사각형:3 >> ";
   cin >> n;
   return n;
}

int UI : :deleteUI() {
    int n;
    cout << "삭제하고자 하는 도형의 인데스 >> ";
    cin >> n;
    rerturn n;
}

//GraphicEitor.cpp
#include <iostream>
#include "GraphicEditor.h"
#include "UI.h"
#include "Shape.h"
#include "Line.h"
#include "Rect.h"
#include "Circle.h"
using namespace std;

GraphicEditor::GraphicEditor() {
    cout << "그래픽 에디터입니다." << endl;
    pStart = nullptr;
    pLast = nullptr;
    run();
}

GraphicEditor::~GraphicEditor() {
    Shape *p = pStart;
    Shape *q;
    while (p != nullptr) {
        q = p->getNext();
        delete p;
        p = q;
    }
}

void GraphicEditor::run() {
    int n;
    while (true) {
        n = UI::menuUI();
        switch (n) {
        case 1:
            insertShape(UI::insertUI());
            break;
        case 2:
            deleteShape(UI::deleteUI());
            break;
        case 3:
            show();
            break;
        default:
            return;
        }
    }
}

void GraphicEditor::show() {
    Shape *p = pStart;
    for (int i = 0; p != nullptr; i++) {
        cout << i << ": ";
        p->paint();
        p = p->getNext();
    }
}

void GraphicEditor::insertShape(int n) {
    Shape *p = nullptr;
    switch (n) {
    case 1:
        p = new Line();
        break;
    case 2:
        p = new Circle();
        break;
    case 3:
        p = new Rect();
        break;
    }

    if (!pStart) {
        pStart = p;
        pLast = pStart;
    }
    else {
        pLast = pLast->add(p);
    }
}

void GraphicEditor::deleteShape(int n) {
    Shape *p = pStart;
    if (n == 0) {
        pStart = p->getNext();
        delete p;
    }
    else {
        Shape *q = p;
        p = p->getNext();
        for (int i = 1; i <= n; i++) {
            if (i == n) {
                q->add(p->getNext());
                delete p;
                break;
            }
            q = p;
            p = p->getNext();
        }
    }
}