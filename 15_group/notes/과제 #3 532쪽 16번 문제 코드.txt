//UI.h
#pragma once
#pragma once

class UI {
    static int n;

public:
    static void start();
    static int menu();
    static int insert();
    static int del();
};

//UI.cpp
#include <iostream>
#include "UI.h"

int UI::n = 0;

void UI::start() {
    std::cout << "그래픽 에디터입니다." << std::endl;
}

int UI::menu() {
    std::cout << "삽입:1, 삭제:2, 모두보기:3, 종료:4 >> ";
    std::cin >> n;
    return n;
}

int UI::insert() {
    std::cout << "선:1, 원:2, 사각형:3 >> ";
    std::cin >> n;
    return n;
}

int UI::del() {
    std::cout << "삭제하고자 하는 도형의 인덱스 >> ";
    std::cin >> n;
    return n;
}

//GraphicEditor.h
#pragma once
#include <vector>
#include "Shape.h"

class GraphicEditor {
    std::vector<Shape*> v;
    std::vector<Shape*>::iterator it;

public:
    GraphicEditor();
    void insert();
    void deleteShape();
    void showAll();
    void start();
};

//GraphicEditor.cpp
#include <iostream>
#include "GraphicEditor.h"
#include "UI.h"
#include "Circle.h"
#include "Rect.h"
#include "Line.h"

GraphicEditor::GraphicEditor() {}

void GraphicEditor::insert() {
    int n = UI::insert();
    if (n == 1)
        v.push_back(new Line());
    else if (n == 2)
        v.push_back(new Circle());
    else if (n == 3)
        v.push_back(new Rect());
    else
        std::cout << "입력 에러" << std::endl;
}

void GraphicEditor::deleteShape() {
    int n = UI::del();
    Shape* del;
    it = v.begin();
    for (int i = 0; i < n; ++i)
        ++it;
    del = *it;
    it = v.erase(it);
    delete del;
}

void GraphicEditor::showAll() {
    for (int i = 0; i < v.size(); ++i) {
        std::cout << i << ": ";
        v[i]->paint();
    }
}

void GraphicEditor::start() {
    UI::start();
    for (;;) {
        int m = UI::menu();
        if (m == 1)
            insert();
        else if (m == 2)
            deleteShape();
        else if (m == 3)
            showAll();
        else if (m == 4)
            break;
        else
            std::cout << "입력 에러 " << std::endl;
    }
}

// main.cpp
#include "GraphicEditor.h"

int main() {
    GraphicEditor* g = new GraphicEditor;
    g->start();
    delete g;
    return 0;
}

//Line.h
#pragma once
class Line : public Shape {
protected:
    virtual void draw();
};

//Line.cpp
#include <iostream>
using namespace std;
#include "Shape.h"
#include "Line.h"
void Line::draw() {
    cout << "Line" << endl;
}

//Circle.h
#pragma once
class Circle : public Shape {
protected:
    virtual void draw();
};

//Circle.cpp
#include <iostream>
using namespace std;
#include "Shape.h"
#include "Circle.h"
void Circle::draw() {
    cout << "Circle" << endl;
}

//Rect.h
#pragma once
class Rect : public Shape {
protected:
    virtual void draw();
};


//Rect.cpp
#include <iostream>
using namespace std;
#include "Shape.h"
#include "Rect.h"
void Rect::draw() {
    cout << "Rectangle" << endl;
}

//Shape.h
#pragma once
#ifndef SHAPE_H
#define SHAPE_H
class Shape {
protected:
    virtual void draw() = 0;
public:
    void paint();
};

//Shape.cpp
#include <iostream>
#include "Shape.h"
using namespace std;
void Shape::paint() {
    draw();
}

#endif
